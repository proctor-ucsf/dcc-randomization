[["index.html", "Francis I. Proctor Foundation Guide to Randomization Welcome!", " Francis I. Proctor Foundation Guide to Randomization Contributors: Ben Arnold Compiled: 2021-03-04 Welcome! This is a guide for best (essential!) practices in trial randomization and masking. At the Proctor Foundation, we lead many randomized, controlled trials to study intervention effects. Many of our trials are masked (aka “blinded”), whereby treatment allocation is concealed from participants, investigators, and/or outcome assessors. This short guide is a compendium our team’s best practices around these activities. IMPORTANT: The randomization and masking steps are among the most important activities to ensure a trial’s validity. Jeopardizing one or both can undermine a trial. Team members involved in generating an allocation sequence and masking a trial should work directly with at least one of our faculty biostatisticians. At present, those faculty members include Ben Arnold and Travis Porco. "],["overview.html", "Chapter 1 Overview and Introduction", " Chapter 1 Overview and Introduction Contributors: Ben Arnold Random allocation of treatment to units (individuals or clusters) is perhaps the single strongest design tool we have in epidemiology and clinical research to estimate the causal effect of a treatment on outcomes. Randomization ensures that individuals who receive treatment are, on average, exchangeable with those who do not [1]. Without randomization, individuals who seek or receive treatment are almost inevitably different from those who do not, often in immeasurable ways. This leads to confounding of the treatment-outcome relationship. Importantly [1]: “The term random does not mean the same as haphazard but has a precise technical meaning. By random allocation we mean that each patient has a known chance, usually an equal chance, of being given each treatment, but the treatment to be given cannot be predicted.” In practice, generating an allocation sequence involves the following steps: Table 1.1: Randomization Steps Steps 1 Finalize the study design and randomization plan, including specifics about allocation ratio, any blocking/stratification, and masking. 2 Create a randomization subdirectory within the trial’s project directory to save the randomization files. If randomization is masked, you will need to save the randomization files in a separate, tightly controlled directory (sync’d to the cloud for secure backup). 3 Write a script to generate a random sequence. If the trial is masked, use temporary letters. 4 Assess randomization diagnostics to ensure that the randomization sequence behaves as expected. 5 Share the randomization sequence and diagnostics with the PI and trial’s biostatistician. Have at least 2 people review the randomization script and diagnostics to check for any errors. 6 If the trial is masked, work with the trial’s unmasked biostatistician to assign the final letters to each treatment group using the agreed upon, private mapping between letters and treatment group. 7 Set a new seed, and generate the final sequence. Store the sequence in a .csv file in the randomization directory and lock the file to ensure it cannot be over-written. This short guide will cover details for each step, and will elaborate in some areas where appropriate (e.g., providing examples of how to generate stratified or blocked sequences). Additionally, the guide will cover the important topics of Masking and Allocation Concealment, which are key steps to ensuring the validity of the randomization sequence in the conduct of the trial. This guide does not currently include guidance for advanced topics, such as response-adaptive allocation. References "],["computing.html", "Chapter 2 A few comments on computing", " Chapter 2 A few comments on computing Contributors: Ben Arnold Like all of our data science workflows, generating a random sequence needs to be transparent and reproducible. See Proctor’s handbook on data science. The principles we describe there are germane for randomization sequences as well! https://proctor-ucsf.github.io/dcc-handbook/intro.html All of the examples in this guide use R software. There are surely many other effective ways to generate sequences in other software, but R includes many convenient functions for pseudo-random number generation. Our advice for generating the sequence is to not rely on any packages beyond base R. The R language and packages evolve rapidly. Using base R ensures that functions will behave consistently over time. For example, many tidyverse packages such as the dplyr package are incredible for data manipulation. dplyr includes many convenient pseudo-random sampling routines, but as of this writing its syntax rapidly evolves – some commonly used functions seem to be replaced or deprecated every few months. This makes the code more fragile. As an exception, we do use ggplot2 for graphics in randomization diagnostics examples below. "],["directory.html", "Chapter 3 Creating a Randomization Directory", " Chapter 3 Creating a Randomization Directory Contributors: Ben Arnold The files used to generate a randomization sequence should live in one directory. They should be clearly labeled. They should include lots of comments and documentation to orient a new reader to their contents. The directory should include, at minimum: Table 3.1: Checklist of items that should be in the Randomization Directory Item ____ 1. A metadata README file that describes all files in the directory. ____ 2. The script that generates the randomization sequence(s). ____ 3. Randomization diagnostics (typically an output file from the script). ____ 4. The randomization sequence(s) generated, stored as .csv files. ____ 5. The key that maps group labels to masked codes (masked trials only) ____ 6. A list of team members with access to the masked codes (masked trials only) and randomization sequence file(s) For unmasked randomization, we recommend creating a subdirectory within a trial’s parent directory called Randomization. In the hypothetical MyTrial study below, create a new subdirectory nested within: ~/Box Sync/MyTrial/Randomization If the randomization sequence is masked, then we need to keep the randomization files separate from the main trial directory. Otherwise team members who should not know the mapping between treatment labels and masking codes could discover the link. The sequence could also be discoverable, and if a team member is involved in treating patients that could bias the allocation. In masked trials, we recommend creating a parallel, shadow directory for the trial with restricted access permissions. We typically use the suffix -unmasked-materials to identify the restricted access directories. They should live on the same encrypted server as the trial’s main directory, e.g.: ~/Box Sync/MyTrial-unmasked-materials/Randomization Note that an -unmasked-materials directory can contain other, sensitive, restricted access materials. Such as: interim analyses requested by the trial’s Data and Safety Monitoring Committee, and the primary analysis files/results up until the trial is unmasked. We recommend the -unmasked-materials directory reside on a secure, cloud server that meets UCSF’s IT security standards. At this time, that includes Box and Microsoft OneDrive. The trial’s biostatistician should “own” the directory and should carefully control team member access. Restrict permissions/access to only team members who should have access (item #6, above). Do not create a shareable link to the directory or individual files within the directory. If the randomization script is developed on GitHub, then the trial should maintain a secure repostitory that includes unmasked materials and is highly restricted. Additional details in the chapter on Masking. Table 3.2: Key Points for Restricted Access Directories in Masked Trials Key Points 1 The trial’s biostatistician should control access to a trial’s directory of unmasked materials 2 At least 3 team members should have access to unmasked materials at all times "],["sequences.html", "Chapter 4 Generating Randomization Sequences 4.1 Introduction 4.2 Simple randomization 4.3 Blocked randomization 4.4 Stratified randomization 4.5 Matched randomization", " Chapter 4 Generating Randomization Sequences Contributors: Ben Arnold 4.1 Introduction This chapter includes guides for specific types of randomization. It includes code snippets to illustrate the different types of randomization. In the examples below, we focus on trials with two groups and equal allocation. Multi-arm trials are conceptually similar. Unequal allocation is similar as well, but raises particular issues around masking, described in the Masking chapter. In all of the examples, below, we will use masked examples with 2 letter per arm (so 4 letters total). The rationale for 2+ letters per arm is that if a single letter is accidentally unmasked, then the entire trial will not be unmasked. These examples will carry forward into the next chapter on Randomization Diagnostics. The template files stored in this guide’s Github respository (TBD) provide complete examples of how to put everything together. Note In thes examples, we have a list of study IDs that we bind to the allocation sequence. In some studies, such as those that use the REDCap randomization module, we would simply generate a random sequence of treatment assignments that are not bound to specific study IDs. For example, in REDCap’s randomization module it joins study IDs to a randomized treatment assignment (from the generated sequence) within REDCap itself. We simply upload the random sequence to REDCap. Essential background reading: Altman, D. G. &amp; Martin Bland, J. Treatment allocation in controlled trials: why randomise? BMJ 318, 1209–1209 (1999). https://pubmed.ncbi.nlm.nih.gov/10221955/ [1] Altman, D. G. &amp; Bland, J. M. How to randomise. BMJ 319, 703–704 (1999). https://pubmed.ncbi.nlm.nih.gov/10480833/ [2] Schulz, K. F. &amp; Grimes, D. A. Generation of allocation sequences in randomised trials: chance, not choice. Lancet 359, 515–519 (2002). https://pubmed.ncbi.nlm.nih.gov/11853818/ [3] 4.2 Simple randomization “No other allocation generation approach, irrespective of its complexity and sophistication, surpasses the unpredictability and bias prevention of simple randomisation.” [3] High praise from masters of clinical trials! Simple randomization is the purest form of randomization. Patients (or clusters) are allocated to each arm with a known probability. For larger trials without specific design considerations this might be just the right tool. Many trials led by Proctor faculty favor simple randomization. Schulz and Grimes highlight a downside, which is relevant for smaller trials or those with stratification. With simple randomization, at any point in the sequence the numbers of patients allocated to each treatment group will probably differ, which is not a major problem in terms of statistical efficiency (though perfectly balanced is statistically ideal). For a two-arm trial, the chance of pronounced imbalance becomes negligible with trial sizes greater than 200 [3,4]. But, if 20 participants are randomized with equal probability to two treatment groups, the chance of a 12:8 split (i.e., 60% A, 40% B) or worse is approximately 50%. For 100 participants, the chance of the same ratio (60:40 split) or worse is only 5% [5]. For smaller trials and multi-center trials this chance imbalance could be a problem, and so many trials use blocking and/or stratification in the randomization sequence (next sections). Additional advice from Schulz and Grimes [6]: “Overall, investigators underuse simple randomisation and overuse fixed-block randomisation. For non-double-blinded trials larger than 200 participants, investigators should use simple randomisation more often and accept moderate disparities in group sizes.” Here is an example of generating a simple randomization sequence: #------------------------------- # Example of simple randomization # # 2 arm trial # 2 letters per arm (masked) #------------------------------- #------------------------------- # create a list of 1000 IDs. # in a real trial, we may already # have a list or sampling frame # to work with # # pro tip: always ensure your IDs start with a character # to prevent accidental conversion to numeric variables! #------------------------------- nobs &lt;- 1000 id &lt;- paste0(&quot;ID&quot;,1:nobs) #------------------------------- # Identify letters for # the randomization # # In a masked trial, we would # start with placeholder letters # to vet the sequence generation # and then change them for the # final randomization. # See step 3 in the Overview # # In this example, we use # A, B, T, V #------------------------------- rand_letters &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;T&quot;,&quot;V&quot;) #------------------------------- # set a seed # # this is essential for # creating a reproducible # sequence! After vetting the # randomization with the broader # study team (steps 4-5 in the Overview), # we can change the seed to create a new # (protected) sequence #------------------------------- set.seed(123) #------------------------------- # generate the sequence # # the sample() function # samples the rand_letters # with equal probability # up to the number of IDs # using replacement #------------------------------- tr_masked &lt;- sample(rand_letters, size = length(id), replace = TRUE) #------------------------------- # combine the IDs with the # sequence in a data.frame # # this object would be stored # in the Randomization Directory # as a .csv file #------------------------------- rand_seq &lt;- data.frame(id = id, tr_masked = tr_masked) #------------------------------- # for the sake of example, # unmask and examine the # allocation. # # Pretend letters A and T # are for placebo #------------------------------- tr &lt;- ifelse(tr_masked %in% c(&quot;A&quot;,&quot;T&quot;),&quot;Placebo&quot;,&quot;Treatment&quot;) table(tr) ## tr ## Placebo Treatment ## 506 494 In this example, 51% of the participants were allocated to placebom and 49% were allocated to treatment — a pretty good balance! This would be expected given the trial’s large size. Try running the code above with nobs &lt;- 80 to see what a typical randomization looks like: #------------------------------- # From the above example # create a function # that takes as arguments # a vector of IDs and # masked treatment letters #------------------------------- randomize_simple &lt;- function(ids, letters) { tr_masked &lt;- sample(rand_letters, size = length(id), replace = TRUE) return( data.frame(id = ids, tr_masked = tr_masked) ) } #------------------------------- # setting trial size, creating IDs # and identifying letters, # as in the above example #------------------------------- nobs &lt;- 80 id &lt;- paste0(&quot;ID&quot;,1:nobs) rand_letters &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;T&quot;,&quot;V&quot;) #------------------------------- # generating a new sequence # using the randomize_simple() # function #------------------------------- set.seed(123) rand_seq2 &lt;- randomize_simple(ids = id, letters = rand_letters) rand_seq2$tr &lt;- ifelse(rand_seq2$tr_masked %in% c(&quot;A&quot;,&quot;T&quot;),&quot;Placebo&quot;,&quot;Treatment&quot;) table(rand_seq2$tr) ## ## Placebo Treatment ## 48 32 With the same seed, 48/80 (60%) are allocated to placebo, which is not ideal. Blocking can prevent this type of chance imbalance. 4.3 Blocked randomization “The method of restricted randomisation is used to balance sample sizes. That balance usually enhances statistical power and addresses any time trends that might exist in treatment efficacy and outcome measurement during the course of a trial. Moreover, restricted randomisation within strata becomes essential for investigators to attain the benefits of stratification. Thus, reasonable scientific justification lends support to restriction.” [6] Blocking is one form of restricted randomization. It is often combined with other forms of restriction, including stratification and matching (next sections). With blocking, the numbers of patients randomized in the two groups can never differ by more than half the block length. If the trial uses multiple letters to mask groups, then the number of patients in the two groups can never differ by more than half the block length divided by the number of letters per group. A simple randomization sequence will translate into a random string of letters, such as A A B B B B A B for the first eight patients. If we consider blocks of four at a time, there are only 6 ways in which two patients get A and two patients get B: 1: A A B B 2: A B A B 3: A B B A 4: B B A A 5: B A B A 6: B A A B. Since this could create a predictable sequence within blocks, we strongly recommend the use of randomly permuted block lengths [6]. For example, using block sizes of 2, 4 and 6, each with a secret probability. Note that the block length needs to be a multiple of the number of letters used in the randomization scheme and the sum of the block size probabilities must sum to 1. Blocks that are too long do not preserve balance as well. For a two arm trial, we could use block sizes of 4 and 6. If each group is masked with multiple letters, then we use slightly longer block lengths – see the example below. It is best practice to keep the block sizes and block probabilities secret to help with allocation concealment [7]. Here is an example of generating a blocked randomization sequence. Drawing from the basics in the example above, the sequence generation uses permuted blocks of length 8 and 12 (multiples of the 4 masked letters used). Since there are 2 letters per group, the maximum sequence length divided by number of letters per group (12/2) = 6, so the most the sequence could ever be imbalanced is 1/2*6 = 3 #------------------------------- # setting trial size, creating IDs # and identifying letters, # as in the above example #---------------------------- nobs &lt;- 80 id &lt;- paste0(&quot;ID&quot;,1:nobs) rand_letters &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;T&quot;,&quot;V&quot;) #------------------------------- # set a seed for reproducibility! #------------------------------- set.seed(233) #------------------------------- # generate the permuted block # sequence # block lengths of 8, 12 # with probabilities 0.7, 0.3 #------------------------------- # the number of permuted blocks can be long, much longer than needed nblocks &lt;- 100 block_len &lt;- sample(c(8,12),size=nblocks,replace=TRUE,prob=c(0.7,0.3)) #------------------------------- # expand the sequence, keep # track of the block lengths # # (note: in this step and the next # there is a more transparent # way to code this using dplyr/tidyr, # but we are trying to rely, # when possible, on base R for stability) #------------------------------- d_seq &lt;- data.frame( block_id = rep(seq_len(nblocks), block_len), block_size = rep(block_len, block_len) ) #------------------------------- # generate the allocation sequence # # equal allocation within # permuted blocks of size 8 or 12 # # the loop below iterates through # each block generated above, # and randomly samples the masked # letters (rand_letters) for # either 8 or 12, depending on the # randomly permuted block length #------------------------------- d_seq$tr_masked &lt;- as.character(NA) for(blocki in unique(d_seq$block_id) ) { d_seq$tr_masked[d_seq$block_id == blocki] &lt;- ifelse( d_seq$block_size[d_seq$block_id == blocki] == 8, sample(rep(rand_letters,2), size=8, replace=FALSE), sample(rep(rand_letters,3), size=12, replace=FALSE) ) } #------------------------------- # for the sake of example, # unmask and examine the # allocation for the first nobs # # Pretend letters A and T # are for placebo #------------------------------- d_seq$tr &lt;- ifelse(d_seq$tr_masked %in% c(&quot;A&quot;,&quot;T&quot;),&quot;Placebo&quot;,&quot;Treatment&quot;) table(d_seq$tr[1:nobs]) ## ## Placebo Treatment ## 41 39 In this example, the treatment sequence is now very well balanced with a small sample size of just 80 units. In the next chapter on Randomization Diagnostics, we will illustrate how to examine balance across arms over cumulative enrollment as an internal validity check to ensure the sequence is consistent with the blocking scheme. 4.4 Stratified randomization Stratified randomization is another form of restricted randomization. By creating separate randomization sequences within strata, it ensures through design that treatment allocation will be balanced within each stratum (on average). A common example is center in a multicenter trial. By generating a separate randomization sequence for each center that recruits patients, the trial ensures that a single center will not allocate most of its patients to just one of the arms (just through chance). Since stratification shrinks the effective size of the randomization sequence within each stratum, we strongly recommend combining stratification with permuted blocks to ensure good balance within strata. The process of generating a stratified sequence is to essentially repeat the steps for block randomization within each stratum. If randomization is stratified by clinical site, then each site would have its own randomization sequence. #------------------------------- # setting the number of sites # and identifying letters, # as in the above example # # in this example, we # create 7 different sites, # mimicking a multi-center # RCT. Other examples of # stratification variables # could be administrative district # or baseline characteristics.# #---------------------------- study_sites &lt;- paste0(&quot;site&quot;,1:7) rand_letters &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;T&quot;,&quot;V&quot;) #------------------------------- # set a seed for reproducibility! #------------------------------- set.seed(455) #------------------------------- # generate the permuted block # sequence # block lengths of 8, 12 # with probabilities 0.7, 0.3 #------------------------------- # the number of permuted blocks can be long, much longer than needed nblocks_persite &lt;- 100 block_len &lt;- sample(c(8,12),size=nblocks_persite*length(study_sites),replace=TRUE,prob=c(0.7,0.3)) #------------------------------- # expand the sequence, keep # track of sites, block IDs and # the block lengths # # (note: in this step and the next # there is a more transparent # way to code this using dplyr/tidyr, # but we are trying to rely, # when possible, on base R for stability) #------------------------------- d_seq &lt;- data.frame( site_id = rep( rep(study_sites, rep(nblocks_persite,length(study_sites))), block_len), block_id = rep(seq_len(nblocks_persite*length(study_sites)), block_len), block_size = rep(block_len, block_len) ) d_seq$id &lt;- paste0(&quot;ID&quot;,1:nrow(d_seq)) #------------------------------- # generate the allocation sequence # # equal allocation within # permuted blocks of size 8 or 12 # # the loop below iterates through # each block generated above, # and randomly samples the masked # letters (rand_letters) for # either 8 or 12, depending on the # randomly permuted block length #------------------------------- d_seq$tr_masked &lt;- as.character(NA) for(blocki in unique(d_seq$block_id) ) { d_seq$tr_masked[d_seq$block_id == blocki] &lt;- ifelse( d_seq$block_size[d_seq$block_id == blocki] == 8, sample(rep(rand_letters,2), size=8, replace=FALSE), sample(rep(rand_letters,3), size=12, replace=FALSE) ) } #------------------------------- # for the sake of example, # unmask and examine the # allocation for the first nobs_persite # # Pretend letters A and T # are for placebo #------------------------------- d_seq$tr &lt;- ifelse(d_seq$tr_masked %in% c(&quot;A&quot;,&quot;T&quot;),&quot;Placebo&quot;,&quot;Treatment&quot;) # print the number of units allocated to each group by site # this admittedly uses archaic base R code (not tidy R) # because we are trying to rely only on base R for stability # specify the sequence length desired for each stratum nobs_persite &lt;- 100 site_tr &lt;- tapply(d_seq$tr,d_seq$site_id, function(x) table(x[1:nobs_persite])) sapply(site_tr, function(x) x) ## site1 site2 site3 site4 site5 site6 site7 ## Placebo 50 49 51 50 49 49 50 ## Treatment 50 51 49 50 51 51 50 Blocking with randomly permuted blocks of size 8 or 12 enforces excellent balance between groups both overall and within strata (in this example, sites). 4.5 Matched randomization References "],["randomizationdiagnostics.html", "Chapter 5 Randomization Diagnostics", " Chapter 5 Randomization Diagnostics Contributors: Ben Arnold "],["masking.html", "Chapter 6 Masking", " Chapter 6 Masking Contributors: Ben Arnold "],["allocationconcealment.html", "Chapter 7 Allocation Concealment", " Chapter 7 Allocation Concealment Contributors: Ben Arnold "],["references.html", "References", " References "]]
